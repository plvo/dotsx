import { mkdir, writeFile } from 'node:fs/promises';
import { join } from 'node:path';

/**
 * Test fixtures for integration tests
 * Creates sample configurations, dotfiles, and system files for testing
 */
export class TestFixtures {

  /**
   * Create sample system configuration files that would typically exist on a user's system
   */
  async createSystemConfigs(systemConfigDir: string, homedir: string): Promise<void> {
    await mkdir(systemConfigDir, { recursive: true });

    // Create sample VS Code configuration
    const vscodeDir = join(systemConfigDir, 'Code', 'User');
    await mkdir(vscodeDir, { recursive: true });

    await writeFile(
      join(vscodeDir, 'settings.json'),
      JSON.stringify({
        "editor.fontSize": 14,
        "workbench.colorTheme": "Dark+"
      }, null, 2)
    );

    await writeFile(
      join(vscodeDir, 'keybindings.json'),
      JSON.stringify([
        {
          "key": "ctrl+shift+p",
          "command": "workbench.action.showCommands"
        }
      ], null, 2)
    );

    // Create sample terminal configurations
    await writeFile(
      join(homedir, '.zshrc'),
      `# Sample .zshrc file
export PATH="$HOME/.dotsx/bin:$PATH"
alias ll='ls -la'
alias grep='grep --color=auto'

# Custom prompt
PS1="%F{cyan}%n@%m%f:%F{blue}%~%f$ "
`
    );

    await writeFile(
      join(homedir, '.bashrc'),
      `# Sample .bashrc file
export PATH="$HOME/.dotsx/bin:$PATH"
alias ll='ls -la'
alias grep='grep --color=auto'

# Custom prompt
PS1='\\u@\\h:\\w\\$ '
`
    );

    await writeFile(
      join(homedir, '.tmux.conf'),
      `# Sample .tmux.conf file
set -g default-terminal "screen-256color"
set -g prefix C-a
unbind C-b
bind-key C-a send-prefix

# Window navigation
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
`
    );
  }

  /**
   * Create sample executable scripts for bin management testing
   */
  async createSampleBinScripts(binDir: string): Promise<void> {
    await mkdir(binDir, { recursive: true });

    // Create sample shell script
    await writeFile(
      join(binDir, 'my-script'),
      `#!/bin/bash
echo "Hello from my-script!"
echo "Args: $@"
`
    );

    // Create sample Python script
    await writeFile(
      join(binDir, 'my-python-tool'),
      `#!/usr/bin/env python3
import sys
print("Hello from Python tool!")
print(f"Args: {sys.argv[1:]}")
`
    );

    // Create sample Node.js script
    await writeFile(
      join(binDir, 'my-node-tool'),
      `#!/usr/bin/env node
console.log("Hello from Node.js tool!");
console.log("Args:", process.argv.slice(2));
`
    );
  }

  /**
   * Create sample package list files
   */
  async createSamplePackageFiles(osDir: string): Promise<void> {
    const debianDir = join(osDir, 'debian');
    await mkdir(debianDir, { recursive: true });

    await writeFile(
      join(debianDir, 'apt.txt'),
      `# APT packages for development
# Generated by dotsx
git
curl
vim
nodejs
python3
build-essential
`
    );

    await writeFile(
      join(debianDir, 'snap.txt'),
      `# Snap packages
# Generated by dotsx
code
discord
spotify
`
    );
  }

  /**
   * Create a complete test dotsx directory structure with sample files
   */
  async createCompleteDotsxStructure(dotsxPath: string): Promise<void> {
    const paths = {
      bin: join(dotsxPath, 'bin'),
      ide: join(dotsxPath, 'ide'),
      os: join(dotsxPath, 'os'),
      terminal: join(dotsxPath, 'terminal'),
      symlinks: join(dotsxPath, 'symlinks')
    };

    // Create all directories
    for (const dir of Object.values(paths)) {
      await mkdir(dir, { recursive: true });
    }

    // Create bin files
    await this.createSampleBinScripts(paths.bin);

    await writeFile(
      join(paths.bin, '_dotsx-bin.aliases'),
      `# DotsX bin aliases
alias my-script="$HOME/.dotsx/bin/my-script"
alias my-python-tool="$HOME/.dotsx/bin/my-python-tool"
alias my-node-tool="$HOME/.dotsx/bin/my-node-tool"
`
    );

    // Create package files
    await this.createSamplePackageFiles(paths.os);

    // Create terminal configs
    await writeFile(
      join(paths.terminal, '.zshrc'),
      `# DotsX managed .zshrc
export PATH="$HOME/.dotsx/bin:$PATH"
source ~/.dotsx/bin/_dotsx-bin.aliases
`
    );

    await writeFile(
      join(paths.terminal, '.bashrc'),
      `# DotsX managed .bashrc
export PATH="$HOME/.dotsx/bin:$PATH"
source ~/.dotsx/bin/_dotsx-bin.aliases
`
    );

    // Create IDE configs
    const vscodeDir = join(paths.ide, 'vscode');
    await mkdir(vscodeDir, { recursive: true });

    await writeFile(
      join(vscodeDir, 'settings.json'),
      JSON.stringify({
        "editor.fontSize": 16,
        "workbench.colorTheme": "Monokai"
      }, null, 2)
    );
  }
}
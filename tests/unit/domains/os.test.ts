import { describe, expect, test } from 'bun:test';
import { alpineDomain, archDomain, debianDomain, fedoraDomain, macosDomain, suseDomain } from '../../../src/domains';

describe('domains/os', () => {
  describe('debianDomain', () => {
    test('should have correct basic properties', () => {
      expect(debianDomain.name).toBe('debian');
      expect(debianDomain.type).toBe('os');
      expect(debianDomain.distro).toBe('debian');
      expect(debianDomain.availableOs).toEqual(['linux']);
    });

    test('should have package managers defined', () => {
      expect(debianDomain.packageManagers).toBeDefined();
      expect(typeof debianDomain.packageManagers).toBe('object');

      const packageManagers = debianDomain.packageManagers ?? {};
      expect(Object.keys(packageManagers)).toContain('apt');
      expect(Object.keys(packageManagers)).toContain('snap');
      expect(Object.keys(packageManagers)).toContain('flatpak');
    });

    test('should have APT package manager correctly configured', () => {
      expect(debianDomain.packageManagers?.apt?.configPath).toMatch(/apt\.txt$/);
      expect(debianDomain.packageManagers?.apt?.install).toBe('sudo apt install -y %s');
      expect(debianDomain.packageManagers?.apt?.remove).toBe('sudo apt remove -y %s');
      expect(debianDomain.packageManagers?.apt?.status).toBe('dpkg -s %s');
      expect(debianDomain.packageManagers?.apt?.defaultContent).toContain('APT packages');
      expect(debianDomain.packageManagers?.apt?.defaultContent).toContain('Generated by dotsx');
      expect(debianDomain.packageManagers?.apt?.defaultContent).toContain('Add package names, one per line');
      expect(debianDomain.packageManagers?.apt?.defaultContent).toContain('Lines starting with # are ignored');
    });

    test('should have Snap package manager correctly configured', () => {
      expect(debianDomain.packageManagers?.snap?.configPath).toMatch(/snap\.txt$/);
      expect(debianDomain.packageManagers?.snap?.install).toBe('sudo snap install %s');
      expect(debianDomain.packageManagers?.snap?.remove).toBe('sudo snap remove %s');
      expect(debianDomain.packageManagers?.snap?.status).toBe('snap list | grep -w "%s"');
      expect(debianDomain.packageManagers?.snap?.defaultContent).toContain('Snap packages');
      expect(debianDomain.packageManagers?.snap?.defaultContent).toContain('Generated by dotsx');
      expect(debianDomain.packageManagers?.snap?.defaultContent).toContain('Add package names, one per line');
      expect(debianDomain.packageManagers?.snap?.defaultContent).toContain('Lines starting with # are ignored');
    });

    test('should have Flatpak package manager correctly configured', () => {
      expect(debianDomain.packageManagers?.flatpak?.configPath).toMatch(/flatpak\.txt$/);
      expect(debianDomain.packageManagers?.flatpak?.install).toBe('flatpak install -y %s');
      expect(debianDomain.packageManagers?.flatpak?.remove).toBe('flatpak uninstall -y %s');
      expect(debianDomain.packageManagers?.flatpak?.status).toBe('flatpak list | grep -w "%s"');
      expect(debianDomain.packageManagers?.flatpak?.defaultContent).toContain('Flatpak packages');
      expect(debianDomain.packageManagers?.flatpak?.defaultContent).toContain('Generated by dotsx');
      expect(debianDomain.packageManagers?.flatpak?.defaultContent).toContain('Add package names, one per line');
      expect(debianDomain.packageManagers?.flatpak?.defaultContent).toContain('Lines starting with # are ignored');
    });

    test('should use placeholder %s in commands', () => {
      expect(debianDomain.packageManagers?.apt?.install).toContain('%s');
      expect(debianDomain.packageManagers?.apt?.remove).toContain('%s');
      expect(debianDomain.packageManagers?.apt?.status).toContain('%s');

      expect(debianDomain.packageManagers?.snap?.install).toContain('%s');
      expect(debianDomain.packageManagers?.snap?.remove).toContain('%s');
      expect(debianDomain.packageManagers?.snap?.status).toContain('%s');

      expect(debianDomain.packageManagers?.flatpak?.install).toContain('%s');
      expect(debianDomain.packageManagers?.flatpak?.remove).toContain('%s');
      expect(debianDomain.packageManagers?.flatpak?.status).toContain('%s');
    });

    test('should have default content formatted correctly', () => {

      // All should start with # and end with newline for proper formatting
      expect(debianDomain.packageManagers?.apt?.defaultContent).toMatch(/^\#.*\n$/s);
      expect(debianDomain.packageManagers?.snap?.defaultContent).toMatch(/^\#.*\n$/s);
      expect(debianDomain.packageManagers?.flatpak?.defaultContent).toMatch(/^\#.*\n$/s);

      // Should contain multiple lines
      expect(debianDomain.packageManagers?.apt?.defaultContent.split('\n').length).toBeGreaterThan(1);
      expect(debianDomain.packageManagers?.snap?.defaultContent.split('\n').length).toBeGreaterThan(1);
      expect(debianDomain.packageManagers?.flatpak?.defaultContent.split('\n').length).toBeGreaterThan(1);
    });

    test('should not have symlink paths (OS domains don\'t use symlinks)', () => {
      expect(debianDomain.symlinkPaths).toBeUndefined();
    });
  });

  describe('other OS domains', () => {
    test('should have correct basic properties for fedora', () => {
      expect(fedoraDomain.name).toBe('fedora');
      expect(fedoraDomain.type).toBe('os');
      expect(fedoraDomain.distro).toBe('fedora');
      expect(fedoraDomain.availableOs).toEqual(['linux']);
      expect(fedoraDomain.packageManagers).toBeDefined();
      expect(fedoraDomain.packageManagers?.dnf).toBeDefined();
    });

    test('should have correct basic properties for arch', () => {
      expect(archDomain.name).toBe('arch');
      expect(archDomain.type).toBe('os');
      expect(archDomain.distro).toBe('arch');
      expect(archDomain.availableOs).toEqual(['linux']);
      expect(archDomain.packageManagers).toBeDefined();
      expect(archDomain.packageManagers?.pacman).toBeDefined();
      expect(archDomain.packageManagers?.yay).toBeDefined();
    });

    test('should have correct basic properties for alpine', () => {
      expect(alpineDomain.name).toBe('alpine');
      expect(alpineDomain.type).toBe('os');
      expect(alpineDomain.distro).toBe('alpine');
      expect(alpineDomain.availableOs).toEqual(['linux']);
      expect(alpineDomain.packageManagers).toBeDefined();
      expect(alpineDomain.packageManagers?.apk).toBeDefined();
    });

    test('should have correct basic properties for suse', () => {
      expect(suseDomain.name).toBe('suse');
      expect(suseDomain.type).toBe('os');
      expect(suseDomain.distro).toBe('suse');
      expect(suseDomain.availableOs).toEqual(['linux']);
      expect(suseDomain.packageManagers).toBeDefined();
      expect(suseDomain.packageManagers?.zypper).toBeDefined();
    });

    test('should have correct basic properties for macos', () => {
      expect(macosDomain.name).toBe('macos');
      expect(macosDomain.type).toBe('os');
      expect(macosDomain.distro).toBeNull(); // macOS doesn't have distributions
      expect(macosDomain.availableOs).toEqual(['macos']);
      expect(macosDomain.packageManagers).toBeDefined();
      expect(macosDomain.packageManagers?.brew).toBeDefined();
    });

    test('all OS domains should use placeholder %s in commands', () => {
      const allOsDomains = [debianDomain, fedoraDomain, archDomain, alpineDomain, suseDomain, macosDomain];
      
      for (const domain of allOsDomains) {
        for (const packageManager of Object.values(domain.packageManagers ?? {})) {
          expect(packageManager.install).toContain('%s');
          expect(packageManager.remove).toContain('%s');
          expect(packageManager.status).toContain('%s');
        }
      }
    });

    test('all OS domains should have properly formatted default content', () => {
      const allOsDomains = [debianDomain, fedoraDomain, archDomain, alpineDomain, suseDomain, macosDomain];
      
      for (const domain of allOsDomains) {
        for (const packageManager of Object.values(domain.packageManagers ?? {})) {
          expect(packageManager.defaultContent).toMatch(/^\#.*\n$/s);
          expect(packageManager.defaultContent.split('\n').length).toBeGreaterThan(1);
          expect(packageManager.defaultContent).toContain('Generated by dotsx');
        }
      }
    });
  });
});
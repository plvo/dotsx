import { DOTSX } from '@/lib/constants';
import type { Domain } from '@/types';

const defaultPackageManagersContent = (name: string) => {
  return `# ${name} packages
# Generated by dotsx
# Add package names, one per line
# Lines starting with # are ignored
`;
};

export const debianDomain: Domain = {
  name: 'debian',
  distro: ['debian', 'ubuntu'],
  type: 'os',
  packageManagers: {
    apt: {
      configPath: DOTSX.OS.DEBIAN.APT,
      install: 'sudo apt install -y %s',
      remove: 'sudo apt remove -y %s',
      status: 'dpkg -s %s',
      defaultContent: defaultPackageManagersContent('APT'),
    },
    snap: {
      configPath: DOTSX.OS.DEBIAN.SNAP,
      install: 'sudo snap install %s',
      remove: 'sudo snap remove %s',
      status: 'snap list | grep -w "%s"',
      defaultContent: defaultPackageManagersContent('Snap'),
    },
    flatpak: {
      configPath: DOTSX.OS.DEBIAN.FLATPAK,
      install: 'flatpak install -y %s',
      remove: 'flatpak uninstall -y %s',
      status: 'flatpak list | grep -w "%s"',
      defaultContent: defaultPackageManagersContent('Flatpak'),
    },
  },
};

export const fedoraDomain: Domain = {
  name: 'fedora',
  distro: ['fedora'],
  type: 'os',
  packageManagers: {
    dnf: {
      configPath: DOTSX.OS.FEDORA.DNF,
      install: 'sudo dnf install -y %s',
      remove: 'sudo dnf remove -y %s',
      status: 'dnf list installed %s',
      defaultContent: defaultPackageManagersContent('DNF'),
    },
  },
};

export const archDomain: Domain = {
  name: 'arch',
  distro: ['arch'],
  type: 'os',
  packageManagers: {
    pacman: {
      configPath: DOTSX.OS.ARCH.PACMAN,
      install: 'sudo pacman -S --noconfirm %s',
      remove: 'sudo pacman -Rns --noconfirm %s',
      status: 'pacman -Q %s',
      defaultContent: defaultPackageManagersContent('Pacman'),
    },
    yay: {
      configPath: DOTSX.OS.ARCH.YAY,
      install: 'yay -S --noconfirm %s',
      remove: 'yay -Rns --noconfirm %s',
      status: 'yay -Q %s',
      defaultContent: defaultPackageManagersContent('Yay (AUR)'),
    },
  },
};

export const alpineDomain: Domain = {
  name: 'alpine',
  distro: ['alpine'],
  type: 'os',
  packageManagers: {
    apk: {
      configPath: DOTSX.OS.ALPINE.APK,
      install: 'sudo apk add %s',
      remove: 'sudo apk del %s',
      status: 'apk info -e %s',
      defaultContent: defaultPackageManagersContent('APK'),
    },
  },
};

export const suseDomain: Domain = {
  name: 'suse',
  distro: ['suse'],
  type: 'os',
  packageManagers: {
    zypper: {
      configPath: DOTSX.OS.SUSE.ZYPPER,
      install: 'sudo zypper install -y %s',
      remove: 'sudo zypper remove -y %s',
      status: 'zypper se -i %s',
      defaultContent: defaultPackageManagersContent('Zypper'),
    },
  },
};

export const macosDomain: Domain = {
  name: 'macos',
  distro: null,
  type: 'os',
  packageManagers: {
    brew: {
      configPath: DOTSX.OS.MACOS.BREW,
      install: 'brew install %s',
      remove: 'brew uninstall %s',
      status: 'brew list %s',
      defaultContent: defaultPackageManagersContent('Brew'),
    },
  },
};
